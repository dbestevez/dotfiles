#!/bin/bash

# This hook executes phpunit tests in a project if a phpunit.xml file is found
# in the project root directory.

# Get name of the project (probably topmost directory name).
projectname=${PWD##*/}

# Nothing to do
if [[ ! -f phpunit.xml ]]; then
    exit 0
fi

# Locate our phpunit.
phpunit=`which phpunit`

# Any extra arguments to phpunit should go here.
phpunit_args=""

# Define a location to save the output.
outputlog="/tmp/phpunit_output_`date +%s`.log"

echo -e "+ Starting unit tests..."

# execute unit tests. (Assume that phpunit.xml is in root of project).
output=`${phpunit} ${phpunit_args}`
returnCode=$?

# Save the output of phpunit for posterity.
echo "$output" > $outputlog

# if unit tests fail, output a summary and exit with failure code.
if [ $returnCode -ne 0 ]; then

    # find the line with the summary.
    while read -r line; do
      if [[ $line =~ Errors: || $line =~ Failures: ]] ; then
        summary=$line
        break
      fi
    done <<< "$output"

    # output the status.
    echo -e "  + \033[1m\E[47;41mTest suite failed\033[0m"
    echo -e "   \033[1m - $summary\033[0m"

    echo "  + The full output of phpunit has been saved in:"
    echo -e "   \033[1m - ${outputlog}\033[0m"

    # Abort the commit.
    echo -e "+ \033[1m\E[47;41mABORTING COMMIT\033[0m"
    echo
    exit $returnCode
else
  echo -e "  + \033[1m\E[37;32mTests passed\033[0m"
  echo -e "  + The full output of phpunit has been saved in:"
  echo -e "   \033[1m - ${outputlog}\033[0m"
  echo "+ Proceeding with commit. Have a nice day!"
  echo
fi

exit 0
